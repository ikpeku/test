generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String         @id @default(uuid())
  fullName          String
  nickName          String?
  country           String?
  phone             String?
  gender            String?
  email             String         @unique
  password          String
  profileImage      String?
  role              Role           @default(GUEST)
  resetToken        String?
  resetTokenExpires DateTime?
  totalScore        Int            @default(0)
  comments          Comment[]      @relation("UserComments")
  contributors      Contributor[]  @relation("UserContributors")
  likes             Like[]         @relation("UserLikes")
  posts             Post[]         @relation("UserPosts")
  behavioralData    UserBehavior[]
  userTasks         UserTask[]
}

model Task {
  id            String     @id @default(uuid())
  question      String
  url            String
  options       String[]
  correctAnswer String
  score         Int        @default(5)
  createdAt     DateTime   @default(now())
  updatedAt     DateTime   @updatedAt
  userTasks     UserTask[]
}

model UserTask {
  id          String   @id @default(uuid())
  userId      String
  taskId      String
  userAnswer  String
  isCorrect   Boolean  @default(false)
  scoreEarned Int      @default(0)
  answeredAt  DateTime @default(now())
  task        Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, taskId])
}

model Post {
  id               String        @id @default(uuid())
  title            String
  imageUrl         String?
  description      String?
  authorId         String
  contributors     String[]
  editorRole       String?
  category         String[]
  isPublished      Boolean       @default(false)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  comments         Comment[]     @relation("PostComments")
  contributorsList Contributor[] @relation("PostContributors")
  likes            Like[]        @relation("PostLikes")
  author           User          @relation("UserPosts", fields: [authorId], references: [id])
}

model Contributor {
  id     String @id @default(uuid())
  userId String
  postId String
  post   Post   @relation("PostContributors", fields: [postId], references: [id])
  user   User   @relation("UserContributors", fields: [userId], references: [id])

  @@unique([postId, userId])
}

model Comment {
  id        String   @id @default(uuid())
  body      String
  authorId  String
  postId    String
  createdAt DateTime @default(now())
  author    User     @relation("UserComments", fields: [authorId], references: [id])
  post      Post     @relation("PostComments", fields: [postId], references: [id])
}

model Like {
  id        String   @id @default(uuid())
  userId    String
  postId    String
  createdAt DateTime @default(now())
  post      Post     @relation("PostLikes", fields: [postId], references: [id])
  user      User     @relation("UserLikes", fields: [userId], references: [id])

  @@unique([userId, postId])
}

model Content {
  id          String @id @default(uuid())
  contentUrl  String
  description String
  category    String
}

model Subscriber {
  id    String @id @default(uuid())
  email String @unique
}

model UserBehavior {
  id           String          @id @default(uuid())
  userId       String
  postCategory PostCategory
  interaction  InteractionType
  timestamp    DateTime        @default(now())
  user         User            @relation(fields: [userId], references: [id])
}

enum Role {
  ADMIN
  GUEST
  SUPERADMIN
}

enum InteractionType {
  VIEW
  CLICK
  LIKE
  SHARE
  COMMENT
}

enum PostCategory {
  TECHNOLOGY
  EDUCATION
  LIFESTYLE
  ENTERTAINMENT
  SOFTWARE
  RESEARCH
  DESIGN
  BUSINESS
  AI
  MARKETING
}
